//! Test & Bench helpers

use blake2::digest::{Update, VariableOutput};
use blake2::Blake2bVar;

/// Return a N-byte long hash of the given list of data
fn combine_hashes<const N: usize>(hash_list: &[Vec<u8>]) -> [u8; N] {
    let mut hasher = Blake2bVar::new(N).expect("Failed to construct hasher!");
    hash_list.iter().for_each(|h| hasher.update(h));

    let mut buf = [0u8; N];
    hasher
        .finalize_variable(&mut buf)
        .expect("Failed to finalize hashing");
    buf
}

/// Generate a set of items given the set size and a seed
/// Items are generated by hashing the current index
pub fn gen_items<const N: usize>(seed: &[u8], set_size: u64) -> Vec<[u8; N]> {
    let mut s_p = Vec::with_capacity(set_size as usize);
    for b in 0..set_size {
        let mut data = vec![seed.to_vec()];
        data.push(b.to_be_bytes().to_vec());
        let item = combine_hashes::<N>(&data);
        s_p.push(item);
    }
    s_p
}
